-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
Preguntas orientadoras
-------------------------------------------------------------------------------------------------------------
1. Describa brevemente los diferentes perfiles de familias de microprocesadores/microcontroladores de ARM. Explique alguna de sus diferencias características.

- Cortex A: Procesadores de alto rendimiento orientados a la implementación de sistemas operativos en sistemas embebidos de alta performance.

- Cortex R: Procesadores orientados a sistemas de tiempo real, en donde prima la necesidad de implementar soluciones de baja latencia y alta capacidad de procesamiento.

- Cortex M: Procesadores orientados a dispositivos de consumo masivo y sistemas embebidos compactos (diseñados para alta densidad de código y programación en C).
-------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------
Cortex M
-------------------------------------------------------------------------------------------------------------
1. Describa brevemente las diferencias entre las familias de procesadores Cortex M0, M3 y M4.

Cortex M0: De implementación mínima para bajo consumo y bajo costo. Estan basados en ARM v6-M, el cual tiene un set de instrucciones mas pequeño.
           Son pequeños en terminos de número de puertas, lo cual los hacen ideales para productos de microcontroladores de bajo costo.

Cortex M3/M4: Mayor performance, agregan funcionalidades para procesamiento digital de señales, unidad de protección de memoria, etc.
              Estan basados en ARM v7-M. 
              Cortex M4 puede llevar a cabo algunas aplicaciones de procesamientos de señales digitales que tradicionalmente han sido realizados por un DSP por separado.
-------------------------------------------------------------------------------------------------------------
2. ¿Por qué se dice que el set de instrucciones Thumb permite mayor densidad de código? Explique

El Thumb ISA es un conjunto de instrucciones de 16 bits que proporciona una excelente densidad de código. 
Esto significa que para lograr las mismas tareas, se necesita un tamaño de programa más pequeño. 
Como resultado, puede reducir el costo y el consumo de energía al usar un microcontrolador con un tamaño de memoria flash más pequeño,
y los fabricantes de chips pueden producir chips de microcontroladores con paquetes más pequeños.
La tecnología Thumb-2 permite que las instrucciones de 16 bits y las instrucciones de 32 bits funcionen juntas sin sobrecarga de cambio de estado. 
La mayoría de las operaciones simples se pueden realizar con una instrucción de 16 bits
-------------------------------------------------------------------------------------------------------------
3. ¿Qué entiende por arquitectura load-store? ¿Qué tipo de instrucciones no posee este tipo de arquitectura?

Los procesadores Cortex-M se basan en una arquitectura load-store. 
Esto significa que  pera poder realizar operaciones con datos, estos deben cargarse en registros desde la memoria, 
procesarse y luego volver a escribirse en la memoria utilizando una serie de instrucciones separadas.
-------------------------------------------------------------------------------------------------------------
4. ¿Cómo es el mapa de memoria de la familia?

El mapa de memoria de la familia consta de un maximo de 4gb de espacio. Para ello cuenta con 32 bits de direccionamiento.
Este espacio se divide en varias regiones de memoria. La partición se basa en usos típicos, por lo que las diferentes áreas están diseñadas para usarse principalmente para:

• Accesos de código de programa .
• Accesos a datos (región SRAM por ejemplo).
• Periféricos.
• Componentes de depuración y control interno del procesador.
-------------------------------------------------------------------------------------------------------------
5. ¿Qué ventajas presenta el uso de los “shadowed pointers” del PSP y el MSP?
-------------------------------------------------------------------------------------------------------------
6. Describa los diferentes modos de privilegio y operación del Cortex M, sus relaciones y como se conmuta de uno al otro. 
Describa un ejemplo en el que se pasa del modo privilegiado a no priviligiado y nuevamente a privilegiado.

Los procesadores Cortex-M3 y Cortex-M4 tienen dos estados de operación y dos modos. 
Además, los procesadores pueden tener niveles de acceso privilegiado y no privilegiado
El nivel de acceso privilegiado puede acceder a todos los recursos del procesador, 
mientras que el nivel de acceso no privilegiado significa que algunas regiones de la memoria son inaccesibles y no se pueden usar algunas operaciones.

Estados de operación:

Debug state: cuando el procesador se detiene (por ejemplo, por el depurador o después de llegar a un punto de interrupción), 
             ingresa al estado de depuración y deja de ejecutar instrucciones.

Thumb state: si el procesador ejecuta código de programa, se encuentra en Thumb state.

Modos de opreación:

Modo handler: Al ejecutar un controlador de excepciones, como una rutina de servicio de interrupción (ISR). 
              Cuando está en Modo handler, el procesador siempre tiene un nivel de acceso privilegiado.

Thread mode: Al ejecutar código de aplicación normal, el procesador puede ser ya sea en nivel de acceso privilegiado o nivel de acceso no privilegiado.

El software puede cambiar el procesador en modo privilegiado a modo no privilegiado. Sin embargo, no puede cambiar de no privilegiado a privilegiado. 
Si esto es necesario, el procesador tiene que usar el mecanismo de excepción para manejar el cambio.
-------------------------------------------------------------------------------------------------------------
7. ¿Qué se entiende por modelo de registros ortogonal? Dé un ejemplo
-------------------------------------------------------------------------------------------------------------
8. ¿Qué ventajas presenta el uso de intrucciones de ejecución condicional (IT)? Dé un ejemplo
-------------------------------------------------------------------------------------------------------------
9. Describa brevemente las excepciones más prioritarias (reset, NMI, Hardfault).
-------------------------------------------------------------------------------------------------------------
10. Describa las funciones principales de la pila. ¿Cómo resuelve la arquitectura el llamado a funciones y su retorno?
-------------------------------------------------------------------------------------------------------------
11. Describa la secuencia de reset del microprocesador.
-------------------------------------------------------------------------------------------------------------
12. ¿Qué entiende por “core peripherals”? ¿Qué diferencia existe entre estos y el resto de los periféricos?
-------------------------------------------------------------------------------------------------------------
13. ¿Cómo se implementan las prioridades de las interrupciones? Dé un ejemplo
-------------------------------------------------------------------------------------------------------------
14. ¿Qué es el CMSIS? ¿Qué función cumple? ¿Quién lo provee? ¿Qué ventajas aporta?
-------------------------------------------------------------------------------------------------------------
15. Cuando ocurre una interrupción, asumiendo que está habilitada ¿Cómo opera el microprocesador para atender a la subrutina correspondiente? Explique con un ejemplo
-------------------------------------------------------------------------------------------------------------
17. ¿Cómo cambia la operación de stacking al utilizar la unidad de punto flotante? 
-------------------------------------------------------------------------------------------------------------
16. Explique las características avanzadas de atención a interrupciones: tail chaining y late arrival.
-------------------------------------------------------------------------------------------------------------
17. ¿Qué es el systick? ¿Por qué puede afirmarse que su implementación favorece la portabilidad de los sistemas operativos embebidos?
-------------------------------------------------------------------------------------------------------------
18. ¿Qué funciones cumple la unidad de protección de memoria (MPU)?
-------------------------------------------------------------------------------------------------------------
19. ¿Cuántas regiones pueden configurarse como máximo?
¿Qué ocurre en caso de haber solapamientos de las regiones? 
¿Qué ocurre con las zonas de memoria no cubiertas por las regiones definidas?
-------------------------------------------------------------------------------------------------------------
20. ¿Para qué se suele utilizar la excepción PendSV? ¿Cómo se relaciona su uso con el resto de las excepciones? Dé un ejemplo
-------------------------------------------------------------------------------------------------------------
21. ¿Para qué se suele utilizar la excepción SVC? Expliquelo dentro de un marco de un sistema operativo embebido
-------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------
ISA
-------------------------------------------------------------------------------------------------------------
1. ¿Qué son los sufijos y para qué se los utiliza? Dé un ejemplo
-------------------------------------------------------------------------------------------------------------
2. ¿Para qué se utiliza el sufijo ‘s’? Dé un ejemplo
-------------------------------------------------------------------------------------------------------------
3. ¿Qué utilidad tiene la implementación de instrucciones de aritmética saturada? Dé un ejemplo con operaciones con datos de 8 bits.
-------------------------------------------------------------------------------------------------------------
4. Describa brevemente la interfaz entre assembler y C ¿Cómo se reciben los argumentos de las funciones? 
¿Cómo se devuelve el resultado? ¿Qué registros deben guardarse en la pila antes de ser modificados?
-------------------------------------------------------------------------------------------------------------
5. ¿Qué es una instrucción SIMD? ¿En qué se aplican y que ventajas reporta su uso? Dé un ejemplo.